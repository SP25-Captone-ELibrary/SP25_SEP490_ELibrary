// <auto-generated />
using System;
using FPTU_ELibrary.Infrastructure.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FPTU_ELibrary.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ElibraryDbContext))]
    partial class ElibraryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.AuditTrail", b =>
                {
                    b.Property<int>("AuditTrailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("audit_trail_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditTrailId"));

                    b.Property<string>("ChangedColumns")
                        .IsRequired()
                        .HasColumnType("nvarchar(800)")
                        .HasColumnName("changed_columns");

                    b.Property<DateTime>("DateUtc")
                        .HasColumnType("datetime")
                        .HasColumnName("date_utc");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("EntityId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("entity_id");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("entity_name");

                    b.Property<string>("NewValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(2500)")
                        .HasColumnName("new_values");

                    b.Property<string>("OldValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(2500)")
                        .HasColumnName("old_values");

                    b.Property<string>("TrailType")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("trail_type");

                    b.HasKey("AuditTrailId")
                        .HasName("PK_AuditTrail_AuditTrailId");

                    b.ToTable("Audit_Trail", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("author_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorId"));

                    b.Property<string>("AuthorCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("author_code");

                    b.Property<string>("AuthorImage")
                        .HasMaxLength(2048)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2048)")
                        .HasColumnName("author_image");

                    b.Property<string>("Biography")
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)")
                        .HasColumnName("biography");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("create_date");

                    b.Property<DateTime?>("DateOfDeath")
                        .HasColumnType("datetime")
                        .HasColumnName("date_of_death");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("datetime")
                        .HasColumnName("dob");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("full_name");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Nationality")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("nationality");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date");

                    b.HasKey("AuthorId")
                        .HasName("PK_Author_AuthorId");

                    b.ToTable("Author", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.BorrowRecord", b =>
                {
                    b.Property<int>("BorrowRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("borrow_record_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BorrowRecordId"));

                    b.Property<DateTime>("BorrowDate")
                        .HasColumnType("datetime")
                        .HasColumnName("borrow_date");

                    b.Property<int?>("BorrowRequestId")
                        .HasColumnType("int")
                        .HasColumnName("borrow_request_id");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime")
                        .HasColumnName("due_date");

                    b.Property<Guid>("LibraryCardId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("library_card_id");

                    b.Property<Guid?>("ProcessedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("proceesed_by");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime")
                        .HasColumnName("return_date");

                    b.Property<bool>("SelfServiceBorrow")
                        .HasColumnType("bit")
                        .HasColumnName("self_service_borrow");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<int>("TotalExtension")
                        .HasColumnType("int")
                        .HasColumnName("total_extension");

                    b.HasKey("BorrowRecordId")
                        .HasName("PK_BorrowRecord_BorrowRecordId");

                    b.HasIndex("BorrowRequestId")
                        .IsUnique()
                        .HasFilter("[borrow_request_id] IS NOT NULL");

                    b.HasIndex("LibraryCardId");

                    b.HasIndex("ProcessedBy");

                    b.ToTable("Borrow_Record", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.BorrowRecordDetail", b =>
                {
                    b.Property<int>("BorrowRecordDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("borrow_record_detail_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BorrowRecordDetailId"));

                    b.Property<int>("BorrowRecordId")
                        .HasColumnType("int")
                        .HasColumnName("borrow_record_id");

                    b.Property<DateTime?>("ConditionCheckDate")
                        .HasColumnType("datetime")
                        .HasColumnName("condition_check_date");

                    b.Property<int>("ConditionId")
                        .HasColumnType("int")
                        .HasColumnName("condition_id");

                    b.Property<string>("ImagePublicIds")
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("image_public_ids");

                    b.Property<int>("LibraryItemInstanceId")
                        .HasColumnType("int")
                        .HasColumnName("library_item_instance_id");

                    b.Property<int?>("ReturnConditionId")
                        .HasColumnType("int")
                        .HasColumnName("return_condition_id");

                    b.HasKey("BorrowRecordDetailId")
                        .HasName("PK_BorrowRecordDetail_BorrowRecordDetailId");

                    b.HasIndex("BorrowRecordId");

                    b.HasIndex("ConditionId");

                    b.HasIndex("LibraryItemInstanceId");

                    b.ToTable("Borrow_Record_Detail", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.BorrowRequest", b =>
                {
                    b.Property<int>("BorrowRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("borrow_request_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BorrowRequestId"));

                    b.Property<string>("CancellationReason")
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("cancellation_reason");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("datetime")
                        .HasColumnName("cancelled_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("expiration_date");

                    b.Property<bool>("IsReminderSent")
                        .HasColumnType("bit")
                        .HasColumnName("is_reminder_sent");

                    b.Property<Guid>("LibraryCardId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("library_card_id");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime")
                        .HasColumnName("request_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("status");

                    b.HasKey("BorrowRequestId")
                        .HasName("PK_BorrowRequest_BorrowRequestId");

                    b.HasIndex("LibraryCardId");

                    b.ToTable("Borrow_Request", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.BorrowRequestDetail", b =>
                {
                    b.Property<int>("BorrowRequestDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("borrow_request_detail_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BorrowRequestDetailId"));

                    b.Property<int>("BorrowRequestId")
                        .HasColumnType("int")
                        .HasColumnName("borrow_request_id");

                    b.Property<int>("LibraryItemId")
                        .HasColumnType("int")
                        .HasColumnName("library_item_id");

                    b.Property<int?>("LibraryItemInstanceId")
                        .HasColumnType("int");

                    b.HasKey("BorrowRequestDetailId")
                        .HasName("PK_BorrowRequestDetail_BorrowRequestDetailId");

                    b.HasIndex("BorrowRequestId");

                    b.HasIndex("LibraryItemId");

                    b.HasIndex("LibraryItemInstanceId");

                    b.ToTable("Borrow_Request_Detail", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasMaxLength(155)
                        .HasColumnType("nvarchar(155)")
                        .HasColumnName("english_name");

                    b.Property<bool>("IsAllowAITraining")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_allow_ai_training");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("prefix");

                    b.Property<int>("TotalBorrowDays")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("total_borrow_days");

                    b.Property<string>("VietnameseName")
                        .IsRequired()
                        .HasMaxLength(155)
                        .HasColumnType("nvarchar(155)")
                        .HasColumnName("vietnamese_name");

                    b.HasKey("CategoryId")
                        .HasName("PK_Category_CategoryId");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.DigitalBorrow", b =>
                {
                    b.Property<int>("DigitalBorrowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("digital_borrow_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DigitalBorrowId"));

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("expiry_date");

                    b.Property<int>("ExtensionCount")
                        .HasColumnType("int")
                        .HasColumnName("extension_count");

                    b.Property<bool>("IsExtended")
                        .HasColumnType("bit")
                        .HasColumnName("is_extended");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime")
                        .HasColumnName("register_date");

                    b.Property<int>("ResourceId")
                        .HasColumnType("int")
                        .HasColumnName("resource_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("DigitalBorrowId")
                        .HasName("PK_DigitalBorrow_DigitalBorrowId");

                    b.HasIndex("ResourceId");

                    b.HasIndex("UserId");

                    b.ToTable("Digital_Borrow", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.Employee", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("employee_id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("address");

                    b.Property<string>("Avatar")
                        .HasMaxLength(2048)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2048)")
                        .HasColumnName("avatar");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("create_date");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("datetime")
                        .HasColumnName("dob");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("email_confirmed");

                    b.Property<string>("EmailVerificationCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("email_verification_code");

                    b.Property<string>("EmployeeCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("employee_code");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("first_name");

                    b.Property<string>("Gender")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("gender");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("datetime")
                        .HasColumnName("hire_date");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("modified_date");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("phone");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("PhoneVerificationCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("phone_verification_code");

                    b.Property<DateTime?>("PhoneVerificationExpiry")
                        .HasColumnType("datetime")
                        .HasColumnName("phone_verification_expiry");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<DateTime?>("TerminationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("termination_date");

                    b.Property<string>("TwoFactorBackupCodes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("two_factor_backup_codes");

                    b.Property<bool>("TwoFactorEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("TwoFactorSecretKey")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("two_factor_secret_key");

                    b.HasKey("EmployeeId")
                        .HasName("PK_Employee_EmployeeId");

                    b.HasIndex("RoleId");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.Fine", b =>
                {
                    b.Property<int>("FineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fine_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FineId"));

                    b.Property<int>("BorrowRecordId")
                        .HasColumnType("int")
                        .HasColumnName("borrow_record_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpiryAt")
                        .HasColumnType("datetime")
                        .HasColumnName("expiry_at");

                    b.Property<string>("FineNote")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("fine_note");

                    b.Property<int>("FinePolicyId")
                        .HasColumnType("int")
                        .HasColumnName("fine_policy_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.HasKey("FineId")
                        .HasName("PK_Fine_FineId");

                    b.HasIndex("BorrowRecordId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("FinePolicyId");

                    b.ToTable("Fine", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.FinePolicy", b =>
                {
                    b.Property<int>("FinePolicyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fine_policy_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FinePolicyId"));

                    b.Property<string>("ConditionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("condition_type");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<decimal>("FineAmountPerDay")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("fine_amount_per_day");

                    b.Property<string>("FinePolicyTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("fine_policy_title");

                    b.Property<decimal?>("FixedFineAmount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("fixed_fine_amount");

                    b.HasKey("FinePolicyId")
                        .HasName("PK_FinePolicy_FinePolicyId");

                    b.ToTable("Fine_Policy", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("invoice_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("datetime")
                        .HasColumnName("paid_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("total_amount");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("InvoiceId")
                        .HasName("PK_Invoice_InvoiceId");

                    b.HasIndex("UserId");

                    b.ToTable("Invoice", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.LibraryCard", b =>
                {
                    b.Property<Guid>("LibraryCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("library_card_id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("ArchiveReason")
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("archive_reason");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2048)")
                        .HasColumnName("avatar");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("barcode");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("expiry_date");

                    b.Property<int>("ExtensionCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("extension_count");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("full_name");

                    b.Property<bool>("IsAllowBorrowMore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_allow_borrow_more");

                    b.Property<bool>("IsArchived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_archived");

                    b.Property<bool>("IsExtended")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_extended");

                    b.Property<bool>("IsReminderSent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_reminder_sent");

                    b.Property<string>("IssuanceMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("issuance_method");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime")
                        .HasColumnName("issue_date");

                    b.Property<int>("MaxItemOnceTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("max_item_once_time");

                    b.Property<Guid?>("PreviousUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("previous_user_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("SuspensionEndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("suspension_end_date");

                    b.Property<int>("TotalMissedPickUp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("total_missed_pick_up");

                    b.HasKey("LibraryCardId")
                        .HasName("PK_LibraryCard_LibraryCardId");

                    b.ToTable("Library_Card", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.LibraryCardPackage", b =>
                {
                    b.Property<int>("LibraryCardPackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("library_card_package_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LibraryCardPackageId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("description");

                    b.Property<int>("DurationInMonths")
                        .HasColumnType("int")
                        .HasColumnName("duration_in_months");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("PackageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("package_name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("price");

                    b.HasKey("LibraryCardPackageId")
                        .HasName("PK_LibraryCardPackage_LibraryCardPackageId");

                    b.ToTable("Library_Card_Package", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.LibraryFloor", b =>
                {
                    b.Property<int>("FloorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("floor_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FloorId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("create_date");

                    b.Property<string>("FloorNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("floor_number");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date");

                    b.HasKey("FloorId")
                        .HasName("PK_LibraryFloor_FloorId");

                    b.ToTable("Library_Floor", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.LibraryItem", b =>
                {
                    b.Property<int>("LibraryItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("library_item_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LibraryItemId"));

                    b.Property<string>("AccompanyingMaterial")
                        .HasColumnType("nvarchar(155)")
                        .HasColumnName("accompanying_material");

                    b.Property<string>("AdditionalAuthors")
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("additional_authors");

                    b.Property<string>("BibliographicalNote")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("bibliographical_note");

                    b.Property<bool>("CanBorrow")
                        .HasColumnType("bit")
                        .HasColumnName("can_borrow");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<string>("ClassificationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("classification_number");

                    b.Property<string>("CoverImage")
                        .HasColumnType("varchar(2048)")
                        .HasColumnName("cover_image");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("created_by");

                    b.Property<string>("CutterNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cutter_number");

                    b.Property<string>("Dimensions")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("dimensions");

                    b.Property<string>("Ean")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ean");

                    b.Property<string>("Edition")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("edition");

                    b.Property<int?>("EditionNumber")
                        .HasColumnType("int")
                        .HasColumnName("edition_number");

                    b.Property<decimal?>("EstimatedPrice")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("estimated_price");

                    b.Property<string>("GeneralNote")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("general_note");

                    b.Property<string>("Genres")
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("genres");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("group_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsTrained")
                        .HasColumnType("bit")
                        .HasColumnName("is_trained");

                    b.Property<string>("Isbn")
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)")
                        .HasColumnName("isbn");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("language");

                    b.Property<string>("OriginLanguage")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("origin_language");

                    b.Property<int?>("PageCount")
                        .HasColumnType("int")
                        .HasColumnName("page_count");

                    b.Property<string>("PhysicalDetails")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("physical_details");

                    b.Property<string>("PublicationPlace")
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("publication_place");

                    b.Property<int>("PublicationYear")
                        .HasColumnType("int")
                        .HasColumnName("publication_year");

                    b.Property<string>("Publisher")
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("publisher");

                    b.Property<string>("Responsibility")
                        .HasColumnType("nvarchar(155)")
                        .HasColumnName("responsibility");

                    b.Property<int?>("ShelfId")
                        .HasColumnType("int")
                        .HasColumnName("shelf_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("status");

                    b.Property<string>("SubTitle")
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("sub_title");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(700)")
                        .HasColumnName("summary");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.Property<string>("TopicalTerms")
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("topical_terms");

                    b.Property<DateTime?>("TrainedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("trained_at");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("LibraryItemId")
                        .HasName("PK_LibraryItem_LibraryItemId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("GroupId");

                    b.HasIndex("Isbn")
                        .HasDatabaseName("IX_LibraryItem_ISBN");

                    b.HasIndex("ShelfId");

                    b.HasIndex("Title")
                        .HasDatabaseName("IX_LibraryItem_Title");

                    b.ToTable("Library_Item", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.LibraryItemAuthor", b =>
                {
                    b.Property<int>("LibraryItemAuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("library_item_author_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LibraryItemAuthorId"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int")
                        .HasColumnName("author_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("created_by");

                    b.Property<int>("LibraryItemId")
                        .HasColumnType("int")
                        .HasColumnName("library_item_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("LibraryItemAuthorId")
                        .HasName("PK_LibraryItemAuthor_LibraryItemAuthorId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("LibraryItemId");

                    b.ToTable("Library_Item_Author", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.LibraryItemCondition", b =>
                {
                    b.Property<int>("ConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ConditionId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConditionId"));

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("english_name");

                    b.Property<string>("VietnameseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("vietnamese_name");

                    b.HasKey("ConditionId")
                        .HasName("PK_LibraryItemCondition_ConditionId");

                    b.ToTable("Library_Item_Condition", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.LibraryItemConditionHistory", b =>
                {
                    b.Property<int>("ConditionHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("condition_history_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConditionHistoryId"));

                    b.Property<int>("ConditionId")
                        .HasColumnType("int")
                        .HasColumnName("condition_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("created_by");

                    b.Property<int>("LibraryItemInstanceId")
                        .HasColumnType("int")
                        .HasColumnName("library_item_instance_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("ConditionHistoryId")
                        .HasName("PK_ConditionHistory");

                    b.HasIndex("ConditionId");

                    b.HasIndex("LibraryItemInstanceId");

                    b.ToTable("Library_Item_Condition_History", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.LibraryItemGroup", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("group_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupId"));

                    b.Property<string>("AiTrainingCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ai_training_code");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("author");

                    b.Property<string>("ClassificationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("classification_number");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("created_by");

                    b.Property<string>("CutterNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cutter_number");

                    b.Property<string>("SubTitle")
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("sub_title");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.Property<string>("TopicalTerms")
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("topical_terms");

                    b.Property<DateTime?>("TrainedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("GroupId")
                        .HasName("PK_LibraryItemGroup_GroupId");

                    b.ToTable("Library_Item_Group", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.LibraryItemInstance", b =>
                {
                    b.Property<int>("LibraryItemInstanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("library_item_instance_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LibraryItemInstanceId"));

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("barcode");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<int>("LibraryItemId")
                        .HasColumnType("int")
                        .HasColumnName("library_item_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("LibraryItemInstanceId")
                        .HasName("PK_LibraryItemInstance_InstanceId");

                    b.HasIndex("LibraryItemId");

                    b.ToTable("Library_Item_Instance", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.LibraryItemInventory", b =>
                {
                    b.Property<int>("LibraryItemId")
                        .HasColumnType("int")
                        .HasColumnName("library_item_id");

                    b.Property<int>("AvailableUnits")
                        .HasColumnType("int")
                        .HasColumnName("available_units");

                    b.Property<int>("BorrowedUnits")
                        .HasColumnType("int")
                        .HasColumnName("borrowed_units");

                    b.Property<int>("RequestUnits")
                        .HasColumnType("int")
                        .HasColumnName("request_units");

                    b.Property<int>("ReservedUnits")
                        .HasColumnType("int")
                        .HasColumnName("reserved_units");

                    b.Property<int>("TotalUnits")
                        .HasColumnType("int")
                        .HasColumnName("total_units");

                    b.HasKey("LibraryItemId")
                        .HasName("PK_LibraryItemInventory_LibraryItemId");

                    b.ToTable("Library_Item_Inventory", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.LibraryItemResource", b =>
                {
                    b.Property<int>("LibraryItemResourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("library_item_resource_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LibraryItemResourceId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("created_by");

                    b.Property<int>("LibraryItemId")
                        .HasColumnType("int")
                        .HasColumnName("library_item_id");

                    b.Property<int>("ResourceId")
                        .HasColumnType("int")
                        .HasColumnName("resource_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("LibraryItemResourceId")
                        .HasName("PK_LibraryItemResource");

                    b.HasIndex("LibraryItemId");

                    b.HasIndex("ResourceId");

                    b.ToTable("Library_Item_Resource", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.LibraryItemReview", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("review_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("create_date");

                    b.Property<int>("LibraryItemId")
                        .HasColumnType("int")
                        .HasColumnName("library_item_id");

                    b.Property<double>("RatingValue")
                        .HasColumnType("float")
                        .HasColumnName("rating_value");

                    b.Property<string>("ReviewText")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("review_text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("ReviewId")
                        .HasName("PK_LibraryItemReview_ReviewId");

                    b.HasIndex("LibraryItemId");

                    b.HasIndex("UserId");

                    b.ToTable("Library_Item_Review", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.LibraryPath", b =>
                {
                    b.Property<int>("PathId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("path_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PathId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("create_date");

                    b.Property<double>("Distance")
                        .HasColumnType("float")
                        .HasColumnName("distance");

                    b.Property<int>("FromZoneId")
                        .HasColumnType("int")
                        .HasColumnName("from_zone_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("PathDescription")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("path_description");

                    b.Property<int>("ToZoneId")
                        .HasColumnType("int")
                        .HasColumnName("to_zone_id");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date");

                    b.HasKey("PathId")
                        .HasName("PK_LibraryPath_PathId");

                    b.HasIndex("FromZoneId");

                    b.HasIndex("ToZoneId");

                    b.ToTable("Library_Path", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.LibraryResource", b =>
                {
                    b.Property<int>("ResourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("resource_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResourceId"));

                    b.Property<decimal>("BorrowPrice")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("borrow_price");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("created_by");

                    b.Property<int>("DefaultBorrowDurationDays")
                        .HasColumnType("int")
                        .HasColumnName("default_borrow_duration_days");

                    b.Property<string>("FileFormat")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("file_format");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("provider");

                    b.Property<string>("ProviderMetadata")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("provider_metadata");

                    b.Property<string>("ProviderPublicId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("provider_public_id");

                    b.Property<decimal?>("ResourceSize")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("resource_size");

                    b.Property<string>("ResourceTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("resource_title");

                    b.Property<string>("ResourceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("resource_type");

                    b.Property<string>("ResourceUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasColumnName("resource_url");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("ResourceId")
                        .HasName("PK_LibraryResource_ResourceId");

                    b.ToTable("Library_Resource", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.LibrarySection", b =>
                {
                    b.Property<int>("SectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("section_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SectionId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("create_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("SectionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("section_name");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date");

                    b.Property<int>("ZoneId")
                        .HasColumnType("int")
                        .HasColumnName("zone_id");

                    b.HasKey("SectionId")
                        .HasName("PK_LibrarySection_SectionId");

                    b.HasIndex("ZoneId");

                    b.ToTable("Library_Section", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.LibraryShelf", b =>
                {
                    b.Property<int>("ShelfId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("shelf_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShelfId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("create_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<int>("SectionId")
                        .HasColumnType("int")
                        .HasColumnName("section_id");

                    b.Property<string>("ShelfNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("shelf_number");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date");

                    b.HasKey("ShelfId")
                        .HasName("PK_LibraryShelf_ShelfId");

                    b.HasIndex("SectionId");

                    b.ToTable("Library_Shelf", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.LibraryZone", b =>
                {
                    b.Property<int>("ZoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("zone_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ZoneId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("create_date");

                    b.Property<int>("FloorId")
                        .HasColumnType("int")
                        .HasColumnName("floor_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date");

                    b.Property<double>("XCoordinate")
                        .HasColumnType("float")
                        .HasColumnName("x_coordinate");

                    b.Property<double>("YCoordinate")
                        .HasColumnType("float")
                        .HasColumnName("y_coordinate");

                    b.Property<string>("ZoneName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("zone_name");

                    b.HasKey("ZoneId")
                        .HasName("PK_LibraryZone_ZoneId");

                    b.HasIndex("FloorId");

                    b.ToTable("Library_Zone", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("notification_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("create_date");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit")
                        .HasColumnName("is_public");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("message");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("notification_type");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.HasKey("NotificationId")
                        .HasName("PK_Notification_NotificationId");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.NotificationRecipient", b =>
                {
                    b.Property<int>("NotificationRecipientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("notification_recipient_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationRecipientId"));

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit")
                        .HasColumnName("is_read");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int")
                        .HasColumnName("notification_id");

                    b.Property<Guid>("RecipientId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("recipient_id");

                    b.HasKey("NotificationRecipientId")
                        .HasName("PK_NotificationRecipient_NotificationRecipientId");

                    b.HasIndex("NotificationId");

                    b.HasIndex("RecipientId");

                    b.ToTable("Notification_Recipient", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.PaymentMethod", b =>
                {
                    b.Property<int>("PaymentMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("payment_method_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentMethodId"));

                    b.Property<string>("MethodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("method_name");

                    b.HasKey("PaymentMethodId")
                        .HasName("PK_PaymentMethod_PaymentMethodId");

                    b.ToTable("Payment_Method", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("employee_id");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("expiry_date");

                    b.Property<int>("RefreshCount")
                        .HasColumnType("int");

                    b.Property<string>("RefreshTokenId")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("refresh_token_id");

                    b.Property<string>("TokenId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("token_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("Pk_RefreshToken_Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("Refresh_Token", null, t =>
                        {
                            t.HasCheckConstraint("CK_RefreshToken_UserOrEmployee", "(user_id IS NOT NULL AND employee_id IS NULL) OR (user_id IS NULL AND employee_id IS NOT NULL)");
                        });
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.ReservationQueue", b =>
                {
                    b.Property<int>("QueueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("queue_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QueueId"));

                    b.Property<string>("CancellationReason")
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("cancellation_reason");

                    b.Property<string>("CancelledBy")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("cancelled_by");

                    b.Property<DateTime?>("ExpectedAvailableDateMax")
                        .HasColumnType("datetime")
                        .HasColumnName("expected_available_date_max");

                    b.Property<DateTime?>("ExpectedAvailableDateMin")
                        .HasColumnType("datetime")
                        .HasColumnName("expected_available_date_min");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("expiry_date");

                    b.Property<bool>("IsNotified")
                        .HasColumnType("bit")
                        .HasColumnName("is_notified");

                    b.Property<Guid>("LibraryCardId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("library_card_id");

                    b.Property<int>("LibraryItemId")
                        .HasColumnType("int")
                        .HasColumnName("library_item_id");

                    b.Property<int?>("LibraryItemInstanceId")
                        .HasColumnType("int")
                        .HasColumnName("library_item_instance_id");

                    b.Property<string>("QueueStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("queue_status");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("reservation_date");

                    b.HasKey("QueueId")
                        .HasName("PK_ReservationQueue_QueueId");

                    b.HasIndex("LibraryCardId");

                    b.HasIndex("LibraryItemId");

                    b.HasIndex("LibraryItemInstanceId");

                    b.ToTable("Reservation_Queue", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.RolePermission", b =>
                {
                    b.Property<int>("RolePermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("role_permission_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RolePermissionId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("created_by");

                    b.Property<int>("FeatureId")
                        .HasColumnType("int")
                        .HasColumnName("feature_id");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int")
                        .HasColumnName("permission_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("RolePermissionId")
                        .HasName("PK_RolePermission_RolePermissionId");

                    b.HasIndex("FeatureId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("Role_Permission", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("supplier_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("city");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("contact_email");

                    b.Property<string>("ContactPerson")
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("contact_person");

                    b.Property<string>("ContactPhone")
                        .HasColumnType("nvarchar(12)")
                        .HasColumnName("contact_phone");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("country");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("supplier_name");

                    b.Property<string>("SupplierType")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("supplier_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("SupplierId")
                        .HasName("PK_Supplier_SupplierId");

                    b.ToTable("Supplier", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.SystemFeature", b =>
                {
                    b.Property<int>("FeatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("feature_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeatureId"));

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("english_name");

                    b.Property<string>("VietnameseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("vietnamese_name");

                    b.HasKey("FeatureId")
                        .HasName("PK_SystemFeature_FeatureId");

                    b.ToTable("System_Feature", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.SystemMessage", b =>
                {
                    b.Property<string>("MsgId")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("msg_id");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("create_by");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("create_date");

                    b.Property<string>("En")
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)")
                        .HasColumnName("EN");

                    b.Property<string>("Ja")
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)")
                        .HasColumnName("JA");

                    b.Property<string>("Ko")
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)")
                        .HasColumnName("KO");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("modified_date");

                    b.Property<string>("MsgContent")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)")
                        .HasColumnName("msg_content");

                    b.Property<string>("Ru")
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)")
                        .HasColumnName("RU");

                    b.Property<string>("Vi")
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)")
                        .HasColumnName("VI");

                    b.HasKey("MsgId")
                        .HasName("PK_SystemMessage_MsgId");

                    b.ToTable("System_Message", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.SystemPermission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("permission_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermissionId"));

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("english_name");

                    b.Property<int>("PermissionLevel")
                        .HasColumnType("int")
                        .HasColumnName("permission_level");

                    b.Property<string>("VietnameseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("vietnamese_name");

                    b.HasKey("PermissionId")
                        .HasName("PK_SystemPermission_PermissionId");

                    b.ToTable("System_Permission", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.SystemRole", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("created_by");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("english_name");

                    b.Property<string>("RoleType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("role_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("updated_by");

                    b.Property<string>("VietnameseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("vietnamese_name");

                    b.HasKey("RoleId")
                        .HasName("PK_SystemRole_RoleId");

                    b.ToTable("System_Role", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("transaction_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("amount");

                    b.Property<string>("CancellationReason")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cancellation_reason");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("datetime")
                        .HasColumnName("canceled_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<int?>("DigitalBorrowId")
                        .HasColumnType("int")
                        .HasColumnName("digital_borrow_id");

                    b.Property<int?>("FineId")
                        .HasColumnType("int")
                        .HasColumnName("fine_id");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int")
                        .HasColumnName("invoice_id");

                    b.Property<int?>("LibraryCardPackageId")
                        .HasColumnType("int")
                        .HasColumnName("library_card_package_id");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int")
                        .HasColumnName("payment_method_id");

                    b.Property<string>("TransactionCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("transaction_code");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("datetime")
                        .HasColumnName("transaction_date");

                    b.Property<string>("TransactionStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("transaction_status");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("transaction_type");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("TransactionId")
                        .HasName("PK_Transaction_TransactionId");

                    b.HasIndex("DigitalBorrowId");

                    b.HasIndex("FineId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("LibraryCardPackageId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("UserId");

                    b.ToTable("Transaction", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("address");

                    b.Property<string>("Avatar")
                        .HasMaxLength(2048)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2048)")
                        .HasColumnName("avatar");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("create_date");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("datetime")
                        .HasColumnName("dob");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("email_confirmed");

                    b.Property<string>("EmailVerificationCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("email_verification_code");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("first_name");

                    b.Property<string>("Gender")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("gender");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsEmployeeCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_employee_created");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("last_name");

                    b.Property<Guid?>("LibraryCardId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("library_card_id");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(155)")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("modified_date");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("phone");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("PhoneVerificationCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("phone_verification_code");

                    b.Property<DateTime?>("PhoneVerificationExpiry")
                        .HasColumnType("datetime")
                        .HasColumnName("phone_verification_expiry");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<string>("TwoFactorBackupCodes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("two_factor_backup_codes");

                    b.Property<bool>("TwoFactorEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("TwoFactorSecretKey")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("two_factor_secret_key");

                    b.HasKey("UserId")
                        .HasName("PK_User_UserId");

                    b.HasIndex("LibraryCardId");

                    b.HasIndex("RoleId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.UserFavorite", b =>
                {
                    b.Property<int>("FavoriteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("favorite_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FavoriteId"));

                    b.Property<int>("LibraryItemId")
                        .HasColumnType("int")
                        .HasColumnName("library_item_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("FavoriteId")
                        .HasName("PK_UserFavorite_FavoriteId");

                    b.HasIndex("LibraryItemId");

                    b.HasIndex(new[] { "UserId", "LibraryItemId" }, "UQ_UserFavorite")
                        .IsUnique();

                    b.ToTable("User_Favorite", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.WarehouseTracking", b =>
                {
                    b.Property<int>("TrackingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("tracking_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrackingId"));

                    b.Property<DateTime?>("ActualReturnDate")
                        .HasColumnType("datetime")
                        .HasColumnName("actual_return_date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("entry_date");

                    b.Property<DateTime?>("ExpectedReturnDate")
                        .HasColumnType("datetime")
                        .HasColumnName("expected_return_date");

                    b.Property<string>("ReceiptNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("receipt_number");

                    b.Property<int>("Status")
                        .HasMaxLength(30)
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("supplier_id");

                    b.Property<decimal>("TotalAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0.0m)
                        .HasColumnName("total_amount");

                    b.Property<int>("TotalItem")
                        .HasColumnType("int")
                        .HasColumnName("total_item");

                    b.Property<int>("TrackingType")
                        .HasMaxLength(30)
                        .HasColumnType("int")
                        .HasColumnName("tracking_type");

                    b.Property<string>("TransferLocation")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("transfer_location");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("TrackingId")
                        .HasName("PK_WarehouseTracking_TrackingId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Warehouse_Tracking", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.WarehouseTrackingDetail", b =>
                {
                    b.Property<int>("TrackingDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("tracking_detail_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrackingDetailId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<int>("ConditionId")
                        .HasColumnType("int")
                        .HasColumnName("condition_id");

                    b.Property<string>("Isbn")
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)")
                        .HasColumnName("isbn");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("item_name");

                    b.Property<int>("ItemTotal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("item_total");

                    b.Property<int?>("LibraryItemId")
                        .HasColumnType("int")
                        .HasColumnName("library_item_id");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("reason");

                    b.Property<decimal>("TotalAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0.0m)
                        .HasColumnName("total_amount");

                    b.Property<int>("TrackingId")
                        .HasColumnType("int")
                        .HasColumnName("tracking_id");

                    b.Property<decimal>("UnitPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10, 2)")
                        .HasDefaultValue(0.0m)
                        .HasColumnName("unit_price");

                    b.HasKey("TrackingDetailId")
                        .HasName("PK_WarehouseTrackingDetail_TrackingDetailId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ConditionId");

                    b.HasIndex("LibraryItemId");

                    b.HasIndex("TrackingId");

                    b.ToTable("Warehouse_Tracking_Detail", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.BorrowRecord", b =>
                {
                    b.HasOne("FPTU_ELibrary.Domain.Entities.BorrowRequest", "BorrowRequest")
                        .WithOne()
                        .HasForeignKey("FPTU_ELibrary.Domain.Entities.BorrowRecord", "BorrowRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_BorrowRecord_BorrowRequestId");

                    b.HasOne("FPTU_ELibrary.Domain.Entities.LibraryCard", "LibraryCard")
                        .WithMany("BorrowRecords")
                        .HasForeignKey("LibraryCardId")
                        .IsRequired()
                        .HasConstraintName("FK_BorrowRecord_LibraryCardId");

                    b.HasOne("FPTU_ELibrary.Domain.Entities.Employee", "ProcessedByNavigation")
                        .WithMany("BorrowRecords")
                        .HasForeignKey("ProcessedBy")
                        .HasConstraintName("FK_BorrowRecord_ProcessedBy");

                    b.Navigation("BorrowRequest");

                    b.Navigation("LibraryCard");

                    b.Navigation("ProcessedByNavigation");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.BorrowRecordDetail", b =>
                {
                    b.HasOne("FPTU_ELibrary.Domain.Entities.BorrowRecord", "BorrowRecord")
                        .WithMany("BorrowRecordDetails")
                        .HasForeignKey("BorrowRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BorrowRecordDetail_BorrowRecordId");

                    b.HasOne("FPTU_ELibrary.Domain.Entities.LibraryItemCondition", "Condition")
                        .WithMany("BorrowRecordDetails")
                        .HasForeignKey("ConditionId")
                        .IsRequired()
                        .HasConstraintName("FK_BorrowRecordDetail_ConditionId");

                    b.HasOne("FPTU_ELibrary.Domain.Entities.LibraryItemInstance", "LibraryItemInstance")
                        .WithMany("BorrowRecordDetails")
                        .HasForeignKey("LibraryItemInstanceId")
                        .IsRequired()
                        .HasConstraintName("FK_BorrowRecordDetail_ItemInstanceId");

                    b.Navigation("BorrowRecord");

                    b.Navigation("Condition");

                    b.Navigation("LibraryItemInstance");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.BorrowRequest", b =>
                {
                    b.HasOne("FPTU_ELibrary.Domain.Entities.LibraryCard", "LibraryCard")
                        .WithMany("BorrowRequests")
                        .HasForeignKey("LibraryCardId")
                        .IsRequired()
                        .HasConstraintName("FK_BorrowRequest_LibraryCardId");

                    b.Navigation("LibraryCard");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.BorrowRequestDetail", b =>
                {
                    b.HasOne("FPTU_ELibrary.Domain.Entities.BorrowRequest", "BorrowRequest")
                        .WithMany("BorrowRequestDetails")
                        .HasForeignKey("BorrowRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BorrowRequestDetail_BorrowRequestId");

                    b.HasOne("FPTU_ELibrary.Domain.Entities.LibraryItem", "LibraryItem")
                        .WithMany("BorrowRequestDetails")
                        .HasForeignKey("LibraryItemId")
                        .IsRequired()
                        .HasConstraintName("FK_BorrowRequestDetail_ItemId");

                    b.HasOne("FPTU_ELibrary.Domain.Entities.LibraryItemInstance", null)
                        .WithMany("BorrowRequestDetails")
                        .HasForeignKey("LibraryItemInstanceId");

                    b.Navigation("BorrowRequest");

                    b.Navigation("LibraryItem");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.DigitalBorrow", b =>
                {
                    b.HasOne("FPTU_ELibrary.Domain.Entities.LibraryResource", "LibraryResource")
                        .WithMany("DigitalBorrows")
                        .HasForeignKey("ResourceId")
                        .IsRequired()
                        .HasConstraintName("FK_DigitalBorrow_ResourceId");

                    b.HasOne("FPTU_ELibrary.Domain.Entities.User", "User")
                        .WithMany("DigitalBorrows")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_DigitalBorrow_UserId");

                    b.Navigation("LibraryResource");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.Employee", b =>
                {
                    b.HasOne("FPTU_ELibrary.Domain.Entities.SystemRole", "Role")
                        .WithMany("Employees")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Employee_RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.Fine", b =>
                {
                    b.HasOne("FPTU_ELibrary.Domain.Entities.BorrowRecord", "BorrowRecord")
                        .WithMany("Fines")
                        .HasForeignKey("BorrowRecordId")
                        .IsRequired()
                        .HasConstraintName("FK_Fine_BorrowRecordId");

                    b.HasOne("FPTU_ELibrary.Domain.Entities.Employee", "CreateByNavigation")
                        .WithMany("FineCreateByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Fine_CreateBY");

                    b.HasOne("FPTU_ELibrary.Domain.Entities.FinePolicy", "FinePolicy")
                        .WithMany("Fines")
                        .HasForeignKey("FinePolicyId")
                        .IsRequired()
                        .HasConstraintName("FK_Fine_FindPolicyId");

                    b.Navigation("BorrowRecord");

                    b.Navigation("CreateByNavigation");

                    b.Navigation("FinePolicy");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.Invoice", b =>
                {
                    b.HasOne("FPTU_ELibrary.Domain.Entities.User", "User")
                        .WithMany("Invoices")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Invoice_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.LibraryItem", b =>
                {
                    b.HasOne("FPTU_ELibrary.Domain.Entities.Category", "Category")
                        .WithMany("LibraryItems")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LibraryItem_CategoryId");

                    b.HasOne("FPTU_ELibrary.Domain.Entities.LibraryItemGroup", "LibraryItemGroup")
                        .WithMany("LibraryItems")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FK_LibraryItem_GroupId");

                    b.HasOne("FPTU_ELibrary.Domain.Entities.LibraryShelf", "Shelf")
                        .WithMany("LibraryItems")
                        .HasForeignKey("ShelfId")
                        .HasConstraintName("FK_LibraryItem_ShelfId");

                    b.Navigation("Category");

                    b.Navigation("LibraryItemGroup");

                    b.Navigation("Shelf");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.LibraryItemAuthor", b =>
                {
                    b.HasOne("FPTU_ELibrary.Domain.Entities.Author", "Author")
                        .WithMany("LibraryItemAuthors")
                        .HasForeignKey("AuthorId")
                        .IsRequired()
                        .HasConstraintName("FK_LibraryItemAuthor_AuthorId");

                    b.HasOne("FPTU_ELibrary.Domain.Entities.LibraryItem", "LibraryItem")
                        .WithMany("LibraryItemAuthors")
                        .HasForeignKey("LibraryItemId")
                        .IsRequired()
                        .HasConstraintName("FK_LibraryItemAuthor_LibraryItemId");

                    b.Navigation("Author");

                    b.Navigation("LibraryItem");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.LibraryItemConditionHistory", b =>
                {
                    b.HasOne("FPTU_ELibrary.Domain.Entities.LibraryItemCondition", "Condition")
                        .WithMany("LibraryItemConditionHistories")
                        .HasForeignKey("ConditionId")
                        .IsRequired()
                        .HasConstraintName("FK_ConditionHistory_ConditionId");

                    b.HasOne("FPTU_ELibrary.Domain.Entities.LibraryItemInstance", "LibraryItemInstance")
                        .WithMany("LibraryItemConditionHistories")
                        .HasForeignKey("LibraryItemInstanceId")
                        .IsRequired()
                        .HasConstraintName("FK_ConditionHistory_LibraryItemInstanceId");

                    b.Navigation("Condition");

                    b.Navigation("LibraryItemInstance");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.LibraryItemInstance", b =>
                {
                    b.HasOne("FPTU_ELibrary.Domain.Entities.LibraryItem", "LibraryItem")
                        .WithMany("LibraryItemInstances")
                        .HasForeignKey("LibraryItemId")
                        .IsRequired()
                        .HasConstraintName("FK_LibraryItemInstance_ItemId");

                    b.Navigation("LibraryItem");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.LibraryItemInventory", b =>
                {
                    b.HasOne("FPTU_ELibrary.Domain.Entities.LibraryItem", "LibraryItem")
                        .WithOne("LibraryItemInventory")
                        .HasForeignKey("FPTU_ELibrary.Domain.Entities.LibraryItemInventory", "LibraryItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LibraryItemInventory_LibraryItemId");

                    b.Navigation("LibraryItem");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.LibraryItemResource", b =>
                {
                    b.HasOne("FPTU_ELibrary.Domain.Entities.LibraryItem", "LibraryItem")
                        .WithMany("LibraryItemResources")
                        .HasForeignKey("LibraryItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LibraryItemResource_LibraryItemId");

                    b.HasOne("FPTU_ELibrary.Domain.Entities.LibraryResource", "LibraryResource")
                        .WithMany("LibraryItemResources")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LibraryItemResource_ResourceId");

                    b.Navigation("LibraryItem");

                    b.Navigation("LibraryResource");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.LibraryItemReview", b =>
                {
                    b.HasOne("FPTU_ELibrary.Domain.Entities.LibraryItem", "LibraryItem")
                        .WithMany("LibraryItemReviews")
                        .HasForeignKey("LibraryItemId")
                        .IsRequired()
                        .HasConstraintName("FK_LibraryItemReview_ItemId");

                    b.HasOne("FPTU_ELibrary.Domain.Entities.User", "User")
                        .WithMany("LibraryItemReviews")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_LibraryItemReview_UserId");

                    b.Navigation("LibraryItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.LibraryPath", b =>
                {
                    b.HasOne("FPTU_ELibrary.Domain.Entities.LibraryZone", "FromZone")
                        .WithMany("LibraryPathFromZones")
                        .HasForeignKey("FromZoneId")
                        .IsRequired()
                        .HasConstraintName("FK_LibraryPath_FromZoneId");

                    b.HasOne("FPTU_ELibrary.Domain.Entities.LibraryZone", "ToZone")
                        .WithMany("LibraryPathToZones")
                        .HasForeignKey("ToZoneId")
                        .IsRequired()
                        .HasConstraintName("FK_LibraryPath_ToZoneId");

                    b.Navigation("FromZone");

                    b.Navigation("ToZone");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.LibrarySection", b =>
                {
                    b.HasOne("FPTU_ELibrary.Domain.Entities.LibraryZone", "Zone")
                        .WithMany("LibrarySections")
                        .HasForeignKey("ZoneId")
                        .IsRequired()
                        .HasConstraintName("FK_LibrarySection_ZoneId");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.LibraryShelf", b =>
                {
                    b.HasOne("FPTU_ELibrary.Domain.Entities.LibrarySection", "Section")
                        .WithMany("LibraryShelves")
                        .HasForeignKey("SectionId")
                        .IsRequired()
                        .HasConstraintName("FK_LibraryShelf_SectionId");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.LibraryZone", b =>
                {
                    b.HasOne("FPTU_ELibrary.Domain.Entities.LibraryFloor", "Floor")
                        .WithMany("LibraryZones")
                        .HasForeignKey("FloorId")
                        .IsRequired()
                        .HasConstraintName("FK_LibraryZone_FloorId");

                    b.Navigation("Floor");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.NotificationRecipient", b =>
                {
                    b.HasOne("FPTU_ELibrary.Domain.Entities.Notification", "Notification")
                        .WithMany("NotificationRecipients")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_NotificationRecipient_NotificationId");

                    b.HasOne("FPTU_ELibrary.Domain.Entities.User", "Recipient")
                        .WithMany("NotificationRecipients")
                        .HasForeignKey("RecipientId")
                        .IsRequired()
                        .HasConstraintName("FK_NotificationRecipient_UserId");

                    b.Navigation("Notification");

                    b.Navigation("Recipient");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("FPTU_ELibrary.Domain.Entities.Employee", "Employee")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_RefreshToken_EmployeeId");

                    b.HasOne("FPTU_ELibrary.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_RefreshToken_UserId");

                    b.Navigation("Employee");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.ReservationQueue", b =>
                {
                    b.HasOne("FPTU_ELibrary.Domain.Entities.LibraryCard", "LibraryCard")
                        .WithMany("ReservationQueues")
                        .HasForeignKey("LibraryCardId")
                        .IsRequired()
                        .HasConstraintName("FK_ReservationQueue_LibraryCardId");

                    b.HasOne("FPTU_ELibrary.Domain.Entities.LibraryItem", "LibraryItem")
                        .WithMany("ReservationQueues")
                        .HasForeignKey("LibraryItemId")
                        .IsRequired()
                        .HasConstraintName("FK_ReservationQueue_ItemId");

                    b.HasOne("FPTU_ELibrary.Domain.Entities.LibraryItemInstance", "LibraryItemInstance")
                        .WithMany("ReservationQueues")
                        .HasForeignKey("LibraryItemInstanceId")
                        .HasConstraintName("FK_ReservationQueue_LibraryItemInstanceId");

                    b.Navigation("LibraryCard");

                    b.Navigation("LibraryItem");

                    b.Navigation("LibraryItemInstance");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("FPTU_ELibrary.Domain.Entities.SystemFeature", "Feature")
                        .WithMany("RolePermissions")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("FK_RolePermission_FeatureId");

                    b.HasOne("FPTU_ELibrary.Domain.Entities.SystemPermission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("FK_RolePermission_PermissionId");

                    b.HasOne("FPTU_ELibrary.Domain.Entities.SystemRole", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("FK_RolePermission_RoleId");

                    b.Navigation("Feature");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("FPTU_ELibrary.Domain.Entities.DigitalBorrow", "DigitalBorrow")
                        .WithMany("Transactions")
                        .HasForeignKey("DigitalBorrowId")
                        .HasConstraintName("FK_Transaction_DigitalBorrowId");

                    b.HasOne("FPTU_ELibrary.Domain.Entities.Fine", "Fine")
                        .WithMany("Transactions")
                        .HasForeignKey("FineId")
                        .HasConstraintName("FK_Transaction_FineId");

                    b.HasOne("FPTU_ELibrary.Domain.Entities.Invoice", "Invoice")
                        .WithMany("Transactions")
                        .HasForeignKey("InvoiceId")
                        .IsRequired()
                        .HasConstraintName("FK_Transaction_InvoiceId");

                    b.HasOne("FPTU_ELibrary.Domain.Entities.LibraryCardPackage", "LibraryCardPackage")
                        .WithMany("Transactions")
                        .HasForeignKey("LibraryCardPackageId")
                        .HasConstraintName("FK_Transaction_LibraryCardPackageId");

                    b.HasOne("FPTU_ELibrary.Domain.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("Transactions")
                        .HasForeignKey("PaymentMethodId")
                        .IsRequired()
                        .HasConstraintName("FK_Transaction_PaymentMethodId");

                    b.HasOne("FPTU_ELibrary.Domain.Entities.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Transaction_UserId");

                    b.Navigation("DigitalBorrow");

                    b.Navigation("Fine");

                    b.Navigation("Invoice");

                    b.Navigation("LibraryCardPackage");

                    b.Navigation("PaymentMethod");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.User", b =>
                {
                    b.HasOne("FPTU_ELibrary.Domain.Entities.LibraryCard", "LibraryCard")
                        .WithMany("Users")
                        .HasForeignKey("LibraryCardId")
                        .HasConstraintName("FK_LibraryCard_LibraryCardId");

                    b.HasOne("FPTU_ELibrary.Domain.Entities.SystemRole", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_SystemRole_RoleId");

                    b.Navigation("LibraryCard");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.UserFavorite", b =>
                {
                    b.HasOne("FPTU_ELibrary.Domain.Entities.LibraryItem", "LibraryItem")
                        .WithMany("UserFavorites")
                        .HasForeignKey("LibraryItemId")
                        .IsRequired()
                        .HasConstraintName("FK_UserFavorite_ItemId");

                    b.HasOne("FPTU_ELibrary.Domain.Entities.User", "User")
                        .WithMany("UserFavorites")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserFavorite_UserId");

                    b.Navigation("LibraryItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.WarehouseTracking", b =>
                {
                    b.HasOne("FPTU_ELibrary.Domain.Entities.Supplier", "Supplier")
                        .WithMany("WarehouseTrackings")
                        .HasForeignKey("SupplierId")
                        .IsRequired()
                        .HasConstraintName("FK_WarehouseTracking_SupplierId");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.WarehouseTrackingDetail", b =>
                {
                    b.HasOne("FPTU_ELibrary.Domain.Entities.Category", "Category")
                        .WithMany("WarehouseTrackingDetails")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_WarehouseTrackingDetail_CategoryId");

                    b.HasOne("FPTU_ELibrary.Domain.Entities.LibraryItemCondition", "Condition")
                        .WithMany("WarehouseTrackingDetails")
                        .HasForeignKey("ConditionId")
                        .IsRequired()
                        .HasConstraintName("FK_WarehouseTrackingDetail_ConditionId");

                    b.HasOne("FPTU_ELibrary.Domain.Entities.LibraryItem", "LibraryItem")
                        .WithMany("WarehouseTrackingDetails")
                        .HasForeignKey("LibraryItemId")
                        .HasConstraintName("FK_WarehouseTrackingDetail_LibraryItemId");

                    b.HasOne("FPTU_ELibrary.Domain.Entities.WarehouseTracking", "WarehouseTracking")
                        .WithMany("WarehouseTrackingDetails")
                        .HasForeignKey("TrackingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_WarehouseTrackingDetail_TrackingId");

                    b.Navigation("Category");

                    b.Navigation("Condition");

                    b.Navigation("LibraryItem");

                    b.Navigation("WarehouseTracking");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.Author", b =>
                {
                    b.Navigation("LibraryItemAuthors");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.BorrowRecord", b =>
                {
                    b.Navigation("BorrowRecordDetails");

                    b.Navigation("Fines");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.BorrowRequest", b =>
                {
                    b.Navigation("BorrowRequestDetails");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.Category", b =>
                {
                    b.Navigation("LibraryItems");

                    b.Navigation("WarehouseTrackingDetails");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.DigitalBorrow", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.Employee", b =>
                {
                    b.Navigation("BorrowRecords");

                    b.Navigation("FineCreateByNavigations");

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.Fine", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.FinePolicy", b =>
                {
                    b.Navigation("Fines");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.Invoice", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.LibraryCard", b =>
                {
                    b.Navigation("BorrowRecords");

                    b.Navigation("BorrowRequests");

                    b.Navigation("ReservationQueues");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.LibraryCardPackage", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.LibraryFloor", b =>
                {
                    b.Navigation("LibraryZones");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.LibraryItem", b =>
                {
                    b.Navigation("BorrowRequestDetails");

                    b.Navigation("LibraryItemAuthors");

                    b.Navigation("LibraryItemInstances");

                    b.Navigation("LibraryItemInventory");

                    b.Navigation("LibraryItemResources");

                    b.Navigation("LibraryItemReviews");

                    b.Navigation("ReservationQueues");

                    b.Navigation("UserFavorites");

                    b.Navigation("WarehouseTrackingDetails");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.LibraryItemCondition", b =>
                {
                    b.Navigation("BorrowRecordDetails");

                    b.Navigation("LibraryItemConditionHistories");

                    b.Navigation("WarehouseTrackingDetails");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.LibraryItemGroup", b =>
                {
                    b.Navigation("LibraryItems");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.LibraryItemInstance", b =>
                {
                    b.Navigation("BorrowRecordDetails");

                    b.Navigation("BorrowRequestDetails");

                    b.Navigation("LibraryItemConditionHistories");

                    b.Navigation("ReservationQueues");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.LibraryResource", b =>
                {
                    b.Navigation("DigitalBorrows");

                    b.Navigation("LibraryItemResources");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.LibrarySection", b =>
                {
                    b.Navigation("LibraryShelves");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.LibraryShelf", b =>
                {
                    b.Navigation("LibraryItems");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.LibraryZone", b =>
                {
                    b.Navigation("LibraryPathFromZones");

                    b.Navigation("LibraryPathToZones");

                    b.Navigation("LibrarySections");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.Notification", b =>
                {
                    b.Navigation("NotificationRecipients");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.PaymentMethod", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.Supplier", b =>
                {
                    b.Navigation("WarehouseTrackings");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.SystemFeature", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.SystemPermission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.SystemRole", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("RolePermissions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.User", b =>
                {
                    b.Navigation("DigitalBorrows");

                    b.Navigation("Invoices");

                    b.Navigation("LibraryItemReviews");

                    b.Navigation("NotificationRecipients");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Transactions");

                    b.Navigation("UserFavorites");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.WarehouseTracking", b =>
                {
                    b.Navigation("WarehouseTrackingDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
