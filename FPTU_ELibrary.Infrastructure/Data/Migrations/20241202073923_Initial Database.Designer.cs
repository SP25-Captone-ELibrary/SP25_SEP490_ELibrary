// <auto-generated />
using System;
using FPTU_ELibrary.Infrastructure.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FPTU_ELibrary.Infrastructure.Migrations
{
    [DbContext(typeof(FptuElibraryDbContext))]
    [Migration("20241202073923_Initial Database")]
    partial class InitialDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("author_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorId"));

                    b.Property<string>("AuthorCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("author_code");

                    b.Property<string>("AuthorImage")
                        .HasMaxLength(2048)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2048)")
                        .HasColumnName("author_image");

                    b.Property<string>("Biography")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("biography");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("create_date");

                    b.Property<DateTime?>("DateOfDeath")
                        .HasColumnType("datetime")
                        .HasColumnName("date_of_death");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("datetime")
                        .HasColumnName("dob");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("Nationality")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("nationality");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date");

                    b.HasKey("AuthorId")
                        .HasName("PK_Author_AuthorId");

                    b.ToTable("Author", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("book_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"));

                    b.Property<bool>("CanBorrow")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("can_borrow");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<Guid>("CreateBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("create_by");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("create_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsDraft")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_draft");

                    b.Property<string>("Summary")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("summary");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_date");

                    b.HasKey("BookId")
                        .HasName("PK_Book_BookId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreateBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Book", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.BookAuthor", b =>
                {
                    b.Property<int>("BookAuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("book_author_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookAuthorId"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int")
                        .HasColumnName("author_id");

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("book_id");

                    b.HasKey("BookAuthorId")
                        .HasName("PK_BookAuthor_BookAuthorId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BookId");

                    b.ToTable("Book_Author", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.BookCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasMaxLength(155)
                        .HasColumnType("nvarchar(155)")
                        .HasColumnName("english_name");

                    b.Property<string>("VietnameseName")
                        .IsRequired()
                        .HasMaxLength(155)
                        .HasColumnType("nvarchar(155)")
                        .HasColumnName("vietnamese_name");

                    b.HasKey("CategoryId")
                        .HasName("PK_BookCategory_CategoryId");

                    b.ToTable("Book_Category", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.BookEdition", b =>
                {
                    b.Property<int>("BookEditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("book_edition_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookEditionId"));

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("book_id");

                    b.Property<string>("CoverImage")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasColumnName("cover_image");

                    b.Property<Guid>("CreateBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("create_by");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("create_date");

                    b.Property<int>("EditionNumber")
                        .HasColumnType("int")
                        .HasColumnName("edition_number");

                    b.Property<string>("EditionTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("edition_title");

                    b.Property<string>("Format")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("format");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Isbn")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)")
                        .HasColumnName("isbn");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("language");

                    b.Property<int>("PageCount")
                        .HasColumnType("int")
                        .HasColumnName("page_count");

                    b.Property<int>("PublicationYear")
                        .HasColumnType("int")
                        .HasColumnName("publication_year");

                    b.Property<string>("Publisher")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("publisher");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_date");

                    b.HasKey("BookEditionId")
                        .HasName("PK_BookEdition_BookEditionId");

                    b.HasIndex("BookId");

                    b.HasIndex("CreateBy");

                    b.ToTable("Book_Edition", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.BookEditionCopy", b =>
                {
                    b.Property<int>("BookEditionCopyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("book_edition_copy_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookEditionCopyId"));

                    b.Property<int>("BookEditionId")
                        .HasColumnType("int")
                        .HasColumnName("book_edition_id");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("create_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<int?>("ShelfId")
                        .HasColumnType("int")
                        .HasColumnName("shelf_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date");

                    b.HasKey("BookEditionCopyId")
                        .HasName("PK_BookEditionCopy_BookEditionCopyId");

                    b.HasIndex("BookEditionId");

                    b.HasIndex("ShelfId");

                    b.ToTable("Book_Edition_Copy", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.BookEditionInventory", b =>
                {
                    b.Property<int>("BookEditionId")
                        .HasColumnType("int")
                        .HasColumnName("book_edition_id");

                    b.Property<int>("AvailableCopies")
                        .HasColumnType("int")
                        .HasColumnName("available_copies");

                    b.Property<int>("RequestCopies")
                        .HasColumnType("int")
                        .HasColumnName("request_copies");

                    b.Property<int>("ReservedCopies")
                        .HasColumnType("int")
                        .HasColumnName("reserved_copies");

                    b.Property<int>("TotalCopies")
                        .HasColumnType("int")
                        .HasColumnName("total_copies");

                    b.HasKey("BookEditionId")
                        .HasName("PK_BookEditionInventory_BookEditionId");

                    b.ToTable("Book_Edition_Inventory", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.BookResource", b =>
                {
                    b.Property<int>("ResourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("resource_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResourceId"));

                    b.Property<int>("BookEditionId")
                        .HasColumnType("int")
                        .HasColumnName("book_edition_id");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("create_date");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("created_by");

                    b.Property<string>("FileFormat")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("file_format");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("provider");

                    b.Property<string>("ProviderMetadata")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("provider_metadata");

                    b.Property<string>("ProviderPublicId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("provider_public_id");

                    b.Property<decimal?>("ResourceSize")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("resource_size");

                    b.Property<string>("ResourceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("resource_type");

                    b.Property<string>("ResourceUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasColumnName("resource_url");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date");

                    b.HasKey("ResourceId")
                        .HasName("PK_BookResource_BookResourceId");

                    b.HasIndex("BookEditionId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Book_Resource", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.BookReview", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("review_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<int>("BookEditionId")
                        .HasColumnType("int")
                        .HasColumnName("book_edition_id");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("create_date");

                    b.Property<int>("RatingValue")
                        .HasColumnType("int")
                        .HasColumnName("rating_value");

                    b.Property<string>("ReviewText")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("review_text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("ReviewId")
                        .HasName("PK_BookReview_ReviewId");

                    b.HasIndex("BookEditionId");

                    b.HasIndex("UserId");

                    b.ToTable("Book_Review", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.BorrowRecord", b =>
                {
                    b.Property<int>("BorrowRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("borrow_record_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BorrowRecordId"));

                    b.Property<int?>("BookEditionCopyId")
                        .HasColumnType("int")
                        .HasColumnName("book_edition_copy_id");

                    b.Property<string>("BorrowCondition")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("borrow_condition");

                    b.Property<DateTime>("BorrowDate")
                        .HasColumnType("datetime")
                        .HasColumnName("borrow_date");

                    b.Property<int?>("BorrowRequestId")
                        .HasColumnType("int");

                    b.Property<string>("BorrowType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("borrow_type");

                    b.Property<Guid>("BorrowerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("borrower_id");

                    b.Property<DateTime?>("ConditionCheckDate")
                        .HasColumnType("datetime")
                        .HasColumnName("condition_check_date");

                    b.Property<decimal?>("DepositFee")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("deposit_fee");

                    b.Property<bool?>("DepositRefunded")
                        .HasColumnType("bit")
                        .HasColumnName("deposit_refunded");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime")
                        .HasColumnName("due_date");

                    b.Property<int>("ExtensionLimit")
                        .HasColumnType("int")
                        .HasColumnName("extension_limit");

                    b.Property<int?>("LearningMaterialId")
                        .HasColumnType("int")
                        .HasColumnName("learning_material_id");

                    b.Property<Guid>("ProcessedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("proceesed_by");

                    b.Property<DateTime>("ProcessedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("processed_date");

                    b.Property<DateTime?>("RefundDate")
                        .HasColumnType("datetime")
                        .HasColumnName("refund_date");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime")
                        .HasColumnName("request_date");

                    b.Property<string>("ReturnCondition")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("return_condition");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime")
                        .HasColumnName("return_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.HasKey("BorrowRecordId")
                        .HasName("PK_BorrowRecord_BorrowRecordId");

                    b.HasIndex("BookEditionCopyId");

                    b.HasIndex("BorrowRequestId");

                    b.HasIndex("BorrowerId");

                    b.HasIndex("LearningMaterialId");

                    b.HasIndex("ProcessedBy");

                    b.ToTable("Borrow_Record", null, t =>
                        {
                            t.HasCheckConstraint("CK_BorrowRecord_BookOrMaterial", "(book_edition_copy_id IS NOT NULL AND learning_material_id IS NULL) OR (book_edition_copy_id IS NULL AND learning_material_id IS NOT NULL)");
                        });
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.BorrowRequest", b =>
                {
                    b.Property<int>("BorrowRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("borrow_request_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BorrowRequestId"));

                    b.Property<int?>("BookEditionCopyId")
                        .HasColumnType("int")
                        .HasColumnName("book_edition_copy_id");

                    b.Property<int?>("BookEditionId")
                        .HasColumnType("int")
                        .HasColumnName("book_edition_id");

                    b.Property<string>("BorrowType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("borrow_type");

                    b.Property<decimal?>("DepositFee")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("deposit_fee");

                    b.Property<bool>("DepositPaid")
                        .HasColumnType("bit")
                        .HasColumnName("deposit_paid");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("description");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("expiration_date");

                    b.Property<int?>("LearningMaterialId")
                        .HasColumnType("int")
                        .HasColumnName("learning_material_id");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime")
                        .HasColumnName("request_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("BorrowRequestId")
                        .HasName("PK_BorrowRequest_BorrowRequestId");

                    b.HasIndex("BookEditionCopyId");

                    b.HasIndex("BookEditionId");

                    b.HasIndex("LearningMaterialId");

                    b.HasIndex("UserId");

                    b.ToTable("Borrow_Request", null, t =>
                        {
                            t.HasCheckConstraint("CK_BorrowRequest_BookOrMaterial", "(book_edition_id IS NOT NULL AND learning_material_id IS NULL) OR (book_edition_id IS NULL AND learning_material_id IS NOT NULL)");
                        });
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.CopyConditionHistory", b =>
                {
                    b.Property<int>("ConditionHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("condition_history_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConditionHistoryId"));

                    b.Property<int>("BookEditionCopyId")
                        .HasColumnType("int")
                        .HasColumnName("book_edition_copy_id");

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("datetime")
                        .HasColumnName("change_date");

                    b.Property<Guid>("ChangedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("changed_by");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("condition");

                    b.HasKey("ConditionHistoryId")
                        .HasName("PK_Book_Condition_History");

                    b.HasIndex("BookEditionCopyId");

                    b.HasIndex("ChangedBy");

                    b.ToTable("Copy_Condition_History", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.Employee", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("employee_id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("address");

                    b.Property<string>("Avatar")
                        .HasMaxLength(2048)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2048)")
                        .HasColumnName("avatar");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("create_date");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("datetime")
                        .HasColumnName("dob");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("EmailVerificationCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("email_verification_code");

                    b.Property<string>("EmployeeCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("employee_code");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("first_name");

                    b.Property<string>("Gender")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("gender");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime")
                        .HasColumnName("hire_date");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<int>("JobRoleId")
                        .HasColumnType("int")
                        .HasColumnName("job_role_id");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("last_name");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("modified_date");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("phone");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("PhoneVerificationCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("phone_verification_code");

                    b.Property<DateTime?>("PhoneVerificationExpiry")
                        .HasColumnType("datetime")
                        .HasColumnName("phone_verification_expiry");

                    b.Property<DateTime?>("TerminationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("termination_date");

                    b.Property<string>("TwoFactorBackupCodes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("two_factor_backup_codes");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("TwoFactorSecretKey")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("two_factor_secret_key");

                    b.HasKey("EmployeeId")
                        .HasName("PK_Employee_EmployeeId");

                    b.HasIndex("JobRoleId");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.Fine", b =>
                {
                    b.Property<int>("FineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fine_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FineId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("amount");

                    b.Property<int>("BorrowRecordId")
                        .HasColumnType("int")
                        .HasColumnName("borrow_record_id");

                    b.Property<Guid?>("CompensateBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("compensate_by");

                    b.Property<string>("CompensateType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("compensate_type");

                    b.Property<DateTime?>("CompensationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("compensation_date");

                    b.Property<string>("CompensationNote")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("compensation_note");

                    b.Property<string>("CompensationStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("compensation_status");

                    b.Property<Guid>("CreateBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("create_by");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("create_date");

                    b.Property<string>("FineNote")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("fine_note");

                    b.Property<int>("FinePolicyId")
                        .HasColumnType("int")
                        .HasColumnName("fine_policy_id");

                    b.Property<string>("PaidStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("paid_status");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime")
                        .HasColumnName("payment_date");

                    b.HasKey("FineId")
                        .HasName("PK_Fine_FineId");

                    b.HasIndex("BorrowRecordId");

                    b.HasIndex("CreateBy");

                    b.HasIndex("FinePolicyId");

                    b.ToTable("Fine", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.FinePolicy", b =>
                {
                    b.Property<int>("FinePolicyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fine_policy_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FinePolicyId"));

                    b.Property<string>("ConditionType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("condition_type");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<decimal>("FineAmountPerDay")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("fine_amount_per_day");

                    b.Property<decimal?>("FixedFineAmount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("fixed_fine_amount");

                    b.HasKey("FinePolicyId")
                        .HasName("PK_FinePolicy_FinePolicyId");

                    b.ToTable("Fine_Policy", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.JobRole", b =>
                {
                    b.Property<int>("JobRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("job_role_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobRoleId"));

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("english_name");

                    b.Property<string>("VietnameseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("vietnamese_name");

                    b.HasKey("JobRoleId")
                        .HasName("PK_JobRole_JobRoleId");

                    b.ToTable("Job_Role", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.LearningMaterial", b =>
                {
                    b.Property<int>("LearningMaterialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("learning_material_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LearningMaterialId"));

                    b.Property<int>("AvailableQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("available_quantity");

                    b.Property<string>("Condition")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("condition");

                    b.Property<Guid>("CreateBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("create_by");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("create_date");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("manufacturer");

                    b.Property<string>("MaterialType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("material_type");

                    b.Property<int?>("ShelfId")
                        .HasColumnType("int")
                        .HasColumnName("shelf_id");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.Property<int>("TotalQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("total_quantity");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("updated_by");

                    b.Property<Guid?>("UpdatedByNavigationEmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_date");

                    b.Property<DateOnly?>("WarrantyPeriod")
                        .HasColumnType("date")
                        .HasColumnName("warranty_period");

                    b.HasKey("LearningMaterialId")
                        .HasName("PK_LearningMaterial_LearningMaterialId");

                    b.HasIndex("CreateBy");

                    b.HasIndex("ShelfId");

                    b.HasIndex("UpdatedByNavigationEmployeeId");

                    b.ToTable("Learning_Material", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.LibraryFloor", b =>
                {
                    b.Property<int>("FloorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("floor_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FloorId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("create_date");

                    b.Property<string>("FloorNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("floor_number");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date");

                    b.HasKey("FloorId")
                        .HasName("PK_LibraryFloor_FloorId");

                    b.ToTable("Library_Floor", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.LibraryPath", b =>
                {
                    b.Property<int>("PathId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("path_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PathId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("create_date");

                    b.Property<double>("Distance")
                        .HasColumnType("float")
                        .HasColumnName("distance");

                    b.Property<int>("FromZoneId")
                        .HasColumnType("int")
                        .HasColumnName("from_zone_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("PathDescription")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("path_description");

                    b.Property<int>("ToZoneId")
                        .HasColumnType("int")
                        .HasColumnName("to_zone_id");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date");

                    b.HasKey("PathId")
                        .HasName("PK_LibraryPath_PathId");

                    b.HasIndex("FromZoneId");

                    b.HasIndex("ToZoneId");

                    b.ToTable("Library_Path", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.LibrarySection", b =>
                {
                    b.Property<int>("SectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("section_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SectionId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("create_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("SectionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("section_name");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date");

                    b.Property<int>("ZoneId")
                        .HasColumnType("int")
                        .HasColumnName("zone_id");

                    b.HasKey("SectionId")
                        .HasName("PK_LibrarySection_SectionId");

                    b.HasIndex("ZoneId");

                    b.ToTable("Library_Section", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.LibraryShelf", b =>
                {
                    b.Property<int>("ShelfId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("shelf_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShelfId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("create_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<int>("SectionId")
                        .HasColumnType("int")
                        .HasColumnName("section_id");

                    b.Property<string>("ShelfNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("shelf_number");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date");

                    b.HasKey("ShelfId")
                        .HasName("PK_LibraryShelf_ShelfId");

                    b.HasIndex("SectionId");

                    b.ToTable("Library_Shelf", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.LibraryZone", b =>
                {
                    b.Property<int>("ZoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("zone_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ZoneId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("create_date");

                    b.Property<int>("FloorId")
                        .HasColumnType("int")
                        .HasColumnName("floor_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date");

                    b.Property<double>("XCoordinate")
                        .HasColumnType("float")
                        .HasColumnName("x_coordinate");

                    b.Property<double>("YCoordinate")
                        .HasColumnType("float")
                        .HasColumnName("y_coordinate");

                    b.Property<string>("ZoneName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("zone_name");

                    b.HasKey("ZoneId")
                        .HasName("PK_LibraryZone_ZoneId");

                    b.HasIndex("FloorId");

                    b.ToTable("Library_Zone", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("notification_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("create_date");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit")
                        .HasColumnName("is_public");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("message");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.HasKey("NotificationId")
                        .HasName("PK_Notification_NotificationId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.NotificationRecipient", b =>
                {
                    b.Property<int>("NotificationRecipientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("notification_recipient_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationRecipientId"));

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit")
                        .HasColumnName("is_read");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int")
                        .HasColumnName("notification_id");

                    b.Property<Guid>("RecipientId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("recipient_id");

                    b.HasKey("NotificationRecipientId")
                        .HasName("PK_NotificationRecipient_NotificationRecipientId");

                    b.HasIndex("NotificationId");

                    b.HasIndex("RecipientId");

                    b.ToTable("Notification_Recipient", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("employee_id");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("expiry_date");

                    b.Property<int>("RefreshCount")
                        .HasColumnType("int");

                    b.Property<string>("RefreshTokenId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("refresh_token_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("Pk_RefreshToken_Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("Refresh_Token", null, t =>
                        {
                            t.HasCheckConstraint("CK_RefreshToken_UserOrEmployee", "(user_id IS NOT NULL AND employee_id IS NULL) OR (user_id IS NULL AND employee_id IS NOT NULL)");
                        });
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.ReservationQueue", b =>
                {
                    b.Property<int>("QueueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("queue_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QueueId"));

                    b.Property<int>("BookEditionId")
                        .HasColumnType("int")
                        .HasColumnName("book_edition_id");

                    b.Property<DateTime>("DepositExpirationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("deposit_expiration_date");

                    b.Property<decimal?>("DepositFee")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("deposit_fee");

                    b.Property<bool?>("DepositPaid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("deposit_paid");

                    b.Property<DateTime?>("ExpectedAvailableDate")
                        .HasColumnType("datetime")
                        .HasColumnName("expected_available_date");

                    b.Property<string>("QueueStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("queue_status");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("reservation_date");

                    b.Property<Guid>("ReservedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("reserved_by");

                    b.HasKey("QueueId")
                        .HasName("PK_ReservationQueue_QueueId");

                    b.HasIndex("BookEditionId");

                    b.HasIndex("ReservedBy");

                    b.ToTable("Reservation_Queue", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.SystemRole", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("english_name");

                    b.Property<string>("VietnameseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("vietnamese_name");

                    b.HasKey("RoleId")
                        .HasName("PK_SystemRole_RoleId");

                    b.ToTable("System_Role", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("Avatar")
                        .HasMaxLength(2048)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2048)")
                        .HasColumnName("avatar");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("create_date");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("datetime")
                        .HasColumnName("dob");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("EmailVerificationCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("email_verification_code");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("ModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("True")
                        .HasColumnName("modified_by");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("phone");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("PhoneVerificationCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("phone_verification_code");

                    b.Property<DateTime?>("PhoneVerificationExpiry")
                        .HasColumnType("datetime")
                        .HasColumnName("phone_verification_expiry");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<string>("TwoFactorBackupCodes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("two_factor_backup_codes");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("TwoFactorSecretKey")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("two_factor_secret_key");

                    b.Property<string>("UserCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("user_code");

                    b.HasKey("UserId")
                        .HasName("PK_User_UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.UserFavorite", b =>
                {
                    b.Property<int>("FavoriteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("favorite_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FavoriteId"));

                    b.Property<int>("BookEditionId")
                        .HasColumnType("int")
                        .HasColumnName("book_edition_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("FavoriteId")
                        .HasName("PK_UserFavorites_FavoriteId");

                    b.HasIndex("BookEditionId");

                    b.HasIndex(new[] { "UserId", "BookEditionId" }, "UQ_UserFavorites")
                        .IsUnique();

                    b.ToTable("User_Favorites", (string)null);
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.Book", b =>
                {
                    b.HasOne("FPTU_ELibrary.Domain.Entities.BookCategory", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Book_CategoryId");

                    b.HasOne("FPTU_ELibrary.Domain.Entities.Employee", "CreateByNavigation")
                        .WithMany("BookCreateByNavigations")
                        .HasForeignKey("CreateBy")
                        .IsRequired()
                        .HasConstraintName("FK_Book_CreateBy");

                    b.HasOne("FPTU_ELibrary.Domain.Entities.Employee", "UpdatedByNavigation")
                        .WithMany("BookUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_Book_UpdateBy");

                    b.Navigation("Category");

                    b.Navigation("CreateByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.BookAuthor", b =>
                {
                    b.HasOne("FPTU_ELibrary.Domain.Entities.Author", "Author")
                        .WithMany("BookAuthors")
                        .HasForeignKey("AuthorId")
                        .IsRequired()
                        .HasConstraintName("FK_BookAuthor_AuthorId");

                    b.HasOne("FPTU_ELibrary.Domain.Entities.Book", "Book")
                        .WithMany("BookAuthors")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK_BookAuthor_BookId");

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.BookEdition", b =>
                {
                    b.HasOne("FPTU_ELibrary.Domain.Entities.Book", "Book")
                        .WithMany("BookEditions")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK_BookEdition_Book");

                    b.HasOne("FPTU_ELibrary.Domain.Entities.Employee", "CreateByNavigation")
                        .WithMany("BookEditions")
                        .HasForeignKey("CreateBy")
                        .IsRequired()
                        .HasConstraintName("FK_BookEdition_CreateBy");

                    b.Navigation("Book");

                    b.Navigation("CreateByNavigation");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.BookEditionCopy", b =>
                {
                    b.HasOne("FPTU_ELibrary.Domain.Entities.BookEdition", "BookEdition")
                        .WithMany("BookEditionCopies")
                        .HasForeignKey("BookEditionId")
                        .IsRequired()
                        .HasConstraintName("FK_BookEditionCopy_BookEditionId");

                    b.HasOne("FPTU_ELibrary.Domain.Entities.LibraryShelf", "Shelf")
                        .WithMany("BookEditionCopies")
                        .HasForeignKey("ShelfId")
                        .HasConstraintName("FK_BookEditionCopy_ShelfId");

                    b.Navigation("BookEdition");

                    b.Navigation("Shelf");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.BookEditionInventory", b =>
                {
                    b.HasOne("FPTU_ELibrary.Domain.Entities.BookEdition", "BookEdition")
                        .WithOne("BookEditionInventory")
                        .HasForeignKey("FPTU_ELibrary.Domain.Entities.BookEditionInventory", "BookEditionId")
                        .IsRequired()
                        .HasConstraintName("FK_BookEditionInventory_BookEditionId");

                    b.Navigation("BookEdition");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.BookResource", b =>
                {
                    b.HasOne("FPTU_ELibrary.Domain.Entities.BookEdition", "BookEdition")
                        .WithMany("BookResources")
                        .HasForeignKey("BookEditionId")
                        .IsRequired()
                        .HasConstraintName("FK_BookResource_BookEditionId");

                    b.HasOne("FPTU_ELibrary.Domain.Entities.Employee", "CreatedByNavigation")
                        .WithMany("BookResources")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_BookResource_CreatedBy");

                    b.Navigation("BookEdition");

                    b.Navigation("CreatedByNavigation");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.BookReview", b =>
                {
                    b.HasOne("FPTU_ELibrary.Domain.Entities.BookEdition", "BookEdition")
                        .WithMany("BookReviews")
                        .HasForeignKey("BookEditionId")
                        .IsRequired()
                        .HasConstraintName("FK_BookReview_BookEditionId");

                    b.HasOne("FPTU_ELibrary.Domain.Entities.User", "User")
                        .WithMany("BookReviews")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_BookReview_UserId");

                    b.Navigation("BookEdition");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.BorrowRecord", b =>
                {
                    b.HasOne("FPTU_ELibrary.Domain.Entities.BookEditionCopy", "BookEditionCopy")
                        .WithMany("BorrowRecords")
                        .HasForeignKey("BookEditionCopyId")
                        .HasConstraintName("FK_BorrowRecord_BookEditionCopyId");

                    b.HasOne("FPTU_ELibrary.Domain.Entities.BorrowRequest", null)
                        .WithMany("BorrowRecords")
                        .HasForeignKey("BorrowRequestId");

                    b.HasOne("FPTU_ELibrary.Domain.Entities.User", "Borrower")
                        .WithMany("BorrowRecords")
                        .HasForeignKey("BorrowerId")
                        .IsRequired()
                        .HasConstraintName("FK_BorrowRecord_BorrowerId");

                    b.HasOne("FPTU_ELibrary.Domain.Entities.LearningMaterial", "LearningMaterial")
                        .WithMany("BorrowRecords")
                        .HasForeignKey("LearningMaterialId")
                        .HasConstraintName("FK_BorrowRecord_LearningMaterialId");

                    b.HasOne("FPTU_ELibrary.Domain.Entities.Employee", "ProcessedByNavigation")
                        .WithMany("BorrowRecords")
                        .HasForeignKey("ProcessedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BorrowRecord_ProcessedBy");

                    b.Navigation("BookEditionCopy");

                    b.Navigation("Borrower");

                    b.Navigation("LearningMaterial");

                    b.Navigation("ProcessedByNavigation");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.BorrowRequest", b =>
                {
                    b.HasOne("FPTU_ELibrary.Domain.Entities.BookEditionCopy", "BookEditionCopy")
                        .WithMany("BorrowRequests")
                        .HasForeignKey("BookEditionCopyId")
                        .HasConstraintName("FK_BorrowRequest_BookEditionCopyId");

                    b.HasOne("FPTU_ELibrary.Domain.Entities.BookEdition", "BookEdition")
                        .WithMany("BorrowRequests")
                        .HasForeignKey("BookEditionId")
                        .HasConstraintName("FK_BorrowRequest_BookEditionId");

                    b.HasOne("FPTU_ELibrary.Domain.Entities.LearningMaterial", "LearningMaterial")
                        .WithMany("BorrowRequests")
                        .HasForeignKey("LearningMaterialId")
                        .HasConstraintName("FK_BorrowRequest_LearningMaterialId");

                    b.HasOne("FPTU_ELibrary.Domain.Entities.User", "User")
                        .WithMany("BorrowRequests")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_BorrowRequest_UserId");

                    b.Navigation("BookEdition");

                    b.Navigation("BookEditionCopy");

                    b.Navigation("LearningMaterial");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.CopyConditionHistory", b =>
                {
                    b.HasOne("FPTU_ELibrary.Domain.Entities.BookEditionCopy", "BookEditionCopy")
                        .WithMany("CopyConditionHistories")
                        .HasForeignKey("BookEditionCopyId")
                        .IsRequired()
                        .HasConstraintName("FK_ConditionHistory_BookEditionCopyId");

                    b.HasOne("FPTU_ELibrary.Domain.Entities.Employee", "ChangedByNavigation")
                        .WithMany("CopyConditionHistories")
                        .HasForeignKey("ChangedBy")
                        .IsRequired()
                        .HasConstraintName("FK_ConditionHistory_ChangedBy");

                    b.Navigation("BookEditionCopy");

                    b.Navigation("ChangedByNavigation");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.Employee", b =>
                {
                    b.HasOne("FPTU_ELibrary.Domain.Entities.JobRole", "JobRole")
                        .WithMany("Employees")
                        .HasForeignKey("JobRoleId")
                        .IsRequired()
                        .HasConstraintName("FK_JobRole_JobRoleId");

                    b.Navigation("JobRole");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.Fine", b =>
                {
                    b.HasOne("FPTU_ELibrary.Domain.Entities.BorrowRecord", "BorrowRecord")
                        .WithMany("Fines")
                        .HasForeignKey("BorrowRecordId")
                        .IsRequired()
                        .HasConstraintName("FK_Fine_BorrowRecordId");

                    b.HasOne("FPTU_ELibrary.Domain.Entities.Employee", "CreateByNavigation")
                        .WithMany("FineCreateByNavigations")
                        .HasForeignKey("CreateBy")
                        .IsRequired()
                        .HasConstraintName("FK_Fine_CreateBY");

                    b.HasOne("FPTU_ELibrary.Domain.Entities.FinePolicy", "FinePolicy")
                        .WithMany("Fines")
                        .HasForeignKey("FinePolicyId")
                        .IsRequired()
                        .HasConstraintName("FK_Fine_FindPolicyId");

                    b.Navigation("BorrowRecord");

                    b.Navigation("CreateByNavigation");

                    b.Navigation("FinePolicy");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.LearningMaterial", b =>
                {
                    b.HasOne("FPTU_ELibrary.Domain.Entities.Employee", "CreateByNavigation")
                        .WithMany("LearningMaterialCreateByNavigations")
                        .HasForeignKey("CreateBy")
                        .IsRequired()
                        .HasConstraintName("FK_LearningMaterial_CreateBy");

                    b.HasOne("FPTU_ELibrary.Domain.Entities.LibraryShelf", "Shelf")
                        .WithMany("LearningMaterials")
                        .HasForeignKey("ShelfId")
                        .HasConstraintName("FK_LearningMaterial_ShelfId");

                    b.HasOne("FPTU_ELibrary.Domain.Entities.Employee", "UpdatedByNavigation")
                        .WithMany()
                        .HasForeignKey("UpdatedByNavigationEmployeeId");

                    b.Navigation("CreateByNavigation");

                    b.Navigation("Shelf");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.LibraryPath", b =>
                {
                    b.HasOne("FPTU_ELibrary.Domain.Entities.LibraryZone", "FromZone")
                        .WithMany("LibraryPathFromZones")
                        .HasForeignKey("FromZoneId")
                        .IsRequired()
                        .HasConstraintName("FK_LibraryPath_FromZoneId");

                    b.HasOne("FPTU_ELibrary.Domain.Entities.LibraryZone", "ToZone")
                        .WithMany("LibraryPathToZones")
                        .HasForeignKey("ToZoneId")
                        .IsRequired()
                        .HasConstraintName("FK_LibraryPath_ToZoneId");

                    b.Navigation("FromZone");

                    b.Navigation("ToZone");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.LibrarySection", b =>
                {
                    b.HasOne("FPTU_ELibrary.Domain.Entities.LibraryZone", "Zone")
                        .WithMany("LibrarySections")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LibrarySection_ZoneId");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.LibraryShelf", b =>
                {
                    b.HasOne("FPTU_ELibrary.Domain.Entities.LibrarySection", "Section")
                        .WithMany("LibraryShelves")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LibraryShelf_SectionId");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.LibraryZone", b =>
                {
                    b.HasOne("FPTU_ELibrary.Domain.Entities.LibraryFloor", "Floor")
                        .WithMany("LibraryZones")
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LibraryZone_FloorId");

                    b.Navigation("Floor");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.Notification", b =>
                {
                    b.HasOne("FPTU_ELibrary.Domain.Entities.Employee", "CreatedByNavigation")
                        .WithMany("Notifications")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Notification_CreatedBy");

                    b.Navigation("CreatedByNavigation");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.NotificationRecipient", b =>
                {
                    b.HasOne("FPTU_ELibrary.Domain.Entities.Notification", "Notification")
                        .WithMany("NotificationRecipients")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_NotificationRecipient_NotificationId");

                    b.HasOne("FPTU_ELibrary.Domain.Entities.User", "Recipient")
                        .WithMany("NotificationRecipients")
                        .HasForeignKey("RecipientId")
                        .IsRequired()
                        .HasConstraintName("FK_NotificationRecipient_UserId");

                    b.Navigation("Notification");

                    b.Navigation("Recipient");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("FPTU_ELibrary.Domain.Entities.Employee", "Employee")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_RefreshToken_EmployeeId");

                    b.HasOne("FPTU_ELibrary.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_RefreshToken_UserId");

                    b.Navigation("Employee");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.ReservationQueue", b =>
                {
                    b.HasOne("FPTU_ELibrary.Domain.Entities.BookEdition", "BookEdition")
                        .WithMany("ReservationQueues")
                        .HasForeignKey("BookEditionId")
                        .IsRequired()
                        .HasConstraintName("FK_ReservationQueue_BookEditionId");

                    b.HasOne("FPTU_ELibrary.Domain.Entities.User", "ReservedByNavigation")
                        .WithMany("ReservationQueues")
                        .HasForeignKey("ReservedBy")
                        .IsRequired()
                        .HasConstraintName("FK_ReservationQueue_ReservedBy");

                    b.Navigation("BookEdition");

                    b.Navigation("ReservedByNavigation");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.User", b =>
                {
                    b.HasOne("FPTU_ELibrary.Domain.Entities.SystemRole", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_SystemRole_RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.UserFavorite", b =>
                {
                    b.HasOne("FPTU_ELibrary.Domain.Entities.BookEdition", "BookEdition")
                        .WithMany("UserFavorites")
                        .HasForeignKey("BookEditionId")
                        .IsRequired()
                        .HasConstraintName("FK_UserFavorites_BookEditionId");

                    b.HasOne("FPTU_ELibrary.Domain.Entities.User", "User")
                        .WithMany("UserFavorites")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserFavorites_UserId");

                    b.Navigation("BookEdition");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.Author", b =>
                {
                    b.Navigation("BookAuthors");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.Book", b =>
                {
                    b.Navigation("BookAuthors");

                    b.Navigation("BookEditions");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.BookCategory", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.BookEdition", b =>
                {
                    b.Navigation("BookEditionCopies");

                    b.Navigation("BookEditionInventory");

                    b.Navigation("BookResources");

                    b.Navigation("BookReviews");

                    b.Navigation("BorrowRequests");

                    b.Navigation("ReservationQueues");

                    b.Navigation("UserFavorites");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.BookEditionCopy", b =>
                {
                    b.Navigation("BorrowRecords");

                    b.Navigation("BorrowRequests");

                    b.Navigation("CopyConditionHistories");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.BorrowRecord", b =>
                {
                    b.Navigation("Fines");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.BorrowRequest", b =>
                {
                    b.Navigation("BorrowRecords");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.Employee", b =>
                {
                    b.Navigation("BookCreateByNavigations");

                    b.Navigation("BookEditions");

                    b.Navigation("BookResources");

                    b.Navigation("BookUpdatedByNavigations");

                    b.Navigation("BorrowRecords");

                    b.Navigation("CopyConditionHistories");

                    b.Navigation("FineCreateByNavigations");

                    b.Navigation("LearningMaterialCreateByNavigations");

                    b.Navigation("Notifications");

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.FinePolicy", b =>
                {
                    b.Navigation("Fines");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.JobRole", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.LearningMaterial", b =>
                {
                    b.Navigation("BorrowRecords");

                    b.Navigation("BorrowRequests");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.LibraryFloor", b =>
                {
                    b.Navigation("LibraryZones");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.LibrarySection", b =>
                {
                    b.Navigation("LibraryShelves");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.LibraryShelf", b =>
                {
                    b.Navigation("BookEditionCopies");

                    b.Navigation("LearningMaterials");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.LibraryZone", b =>
                {
                    b.Navigation("LibraryPathFromZones");

                    b.Navigation("LibraryPathToZones");

                    b.Navigation("LibrarySections");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.Notification", b =>
                {
                    b.Navigation("NotificationRecipients");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.SystemRole", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("FPTU_ELibrary.Domain.Entities.User", b =>
                {
                    b.Navigation("BookReviews");

                    b.Navigation("BorrowRecords");

                    b.Navigation("BorrowRequests");

                    b.Navigation("NotificationRecipients");

                    b.Navigation("RefreshTokens");

                    b.Navigation("ReservationQueues");

                    b.Navigation("UserFavorites");
                });
#pragma warning restore 612, 618
        }
    }
}
